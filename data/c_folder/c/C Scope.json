[
    {
        "title": "Local Scope",
        "text": [
            "A variable created inside a function belongs to the local scope \nof that function, and can only be used inside that function:",
            "Example\n\n  void myFunction() {  // Local variable that belongs to myFunction  int x = 5;  \n  // Print the variable x  printf(\"%d\", x); }int main() {  myFunction();  return \n  0;}\n\nTry it Yourself »",
            "A local variable cannot be used outside the function it belongs to.",
            "If you try to access it outside the function, an error occurs:",
            "Example\n\n  void myFunction() {  // Local variable that belongs to myFunction  \n  int x = 5;}int main() \n  {  myFunction();  // Print the variable x in the main \n  function  \n  printf(\"%d\", x);   return 0;}\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "void myFunction() {  // Local variable that belongs to myFunction  int x = 5;  \n  // Print the variable x  printf(\"%d\", x); }int main() {  myFunction();  return \n  0;}"
            },
            {
                "heading": "Example",
                "code": "void myFunction() {  // Local variable that belongs to myFunction  \n  int x = 5;}int main() \n  {  myFunction();  // Print the variable x in the main \n  function  \n  printf(\"%d\", x);   return 0;}"
            }
        ],
        "tables": []
    },
    {
        "title": "Global Scope",
        "text": [
            "A variable created outside of a function, is called a global variable and \nbelongs to the global scope.\nGlobal variables are available from within any scope, global and local:\n\nExample\nA variable created outside of a function is global and can therefore be used by anyone:\n\n  // Global variable xint x = 5;void myFunction() {  // We \n  can use x here  printf(\"%d\", x); }int main() {  myFunction();\n  // We can also use x here  printf(\"%d\", x);  return \n  0;}\n\nTry it Yourself »\n\nNaming Variables\nIf you operate with the same variable name inside and outside of a function, \nC will treat them as two separate variables; One available in the global scope (outside the function) and one available in the local scope (inside the function):\n\nExample\nThe function will print the local x, and \n  then the code will print the global x:\n\n  // Global variable xint x = 5;void myFunction() {  // Local \n  variable with the same name as the global variable (x)  int x = 22;  \n  printf(\"%d\\n\", x); // Refers to the local variable x}int main() {  myFunction();  \n  printf(\"%d\\n\", x); // Refers to the global variable x  return 0;}\n\nTry it Yourself »\n\nHowever, you should avoid using the same variable name for both globally and locally variables as it can lead to errors and confusion.\nIn general, you should be careful with global variables, since they can be \naccessed and modified from any function:\n\nExample\nChange the value of x from myFunction:\n\n    // Global variableint x = 5;void myFunction() {  \n    printf(\"%d\\n\", ++x); // Increment the value of x by 1 and print it}\nint main() {  myFunction();  printf(\"%d\\n\", x); // \n    Print the global variable x  return 0;}// The value of \n    x is now 6 (no longer 5)\n\nTry it Yourself »\n\n\nConclusion\nTo sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and \nbetter to understand. However, you may find global variables when working on existing C programs or \nwhile collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional.\n\n\n\n\n\n❮ Previous\nNext ❯\n\n\n\n\n\n\n\n\n\n\n\n\n★\n+1\n\n\n\n \n\n\n\nTrack your progress - it's free!\n\n\n \n\n\n\n\n\n\n\n          Log in\n        \n\n          Sign Up"
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Conclusion",
        "text": [
            "To sum up, use local variables (with good variable names) as much as you can. This will make your code easier to maintain and \nbetter to understand. However, you may find global variables when working on existing C programs or \nwhile collaborating with others. Therefore, it is good to understand how the scope works and how to use it effectively to make sure your code is clear and functional.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [],
        "tables": []
    }
]