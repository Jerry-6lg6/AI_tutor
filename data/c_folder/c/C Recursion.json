[
    {
        "title": "Recursion",
        "text": [
            "Recursion is the technique of making a function call itself. This technique provides a way\nto break complicated problems down into simple problems which are easier to solve.",
            "Recursion may be a bit difficult to understand. The\nbest way to figure out how it works is to experiment with it."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Recursion Example",
        "text": [
            "Adding two numbers together is easy to do, but adding a range of numbers is more\ncomplicated. In the following example, recursion is used to add a range of numbers\ntogether by breaking it down into the simple task of adding two numbers:",
            "When the sum() function is called, it adds parameter k to the sum of all numbers smaller\nthan k and returns the result. When k becomes 0, the function just returns 0. When\nrunning, the program follows these steps:",
            "10 + sum(9)\n10 + ( 9 + sum(8) )\n10 + ( 9 + ( 8 + sum(7) ) )\n...\n10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0)\n10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0",
            "Since the function does not call itself when k is 0, the program stops there and returns the\nresult.",
            "The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly, recursion can be a very efficient and mathematically-elegant approach to programming.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int sum(int k);int main() {  int result = sum(10);  \n  printf(\"%d\", result);  return 0;}int sum(int k) {  \n  if (k > 0) {    return k + sum(k - 1);  } else {    \n  return 0;  }}"
            }
        ],
        "tables": []
    }
]