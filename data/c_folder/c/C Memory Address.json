[
    {
        "title": "Memory Address",
        "text": [
            "When a variable is created in C, a memory address is assigned to the variable.",
            "The memory address is the \nlocation of where the variable is stored on the computer.",
            "When we assign a value to the variable, it is stored in this memory \naddress.",
            "To access it, use the reference \noperator (&), and the result represents where the variable is stored:",
            "Example\n\n  int myAge = 43;printf(\"%p\", &myAge); // Outputs 0x7ffe5367e044\n\nTry it Yourself »",
            "Note: The memory address is in hexadecimal form (0x..). You \nwill probably not get the same result in your program, as this depends on where \nthe variable is stored on your computer.",
            "You should also note that &myAge is often called a \"pointer\". A pointer basically stores the memory address of a variable as its value. To print pointer values, \nwe use the %p format specifier.",
            "You will learn much more about \npointers in the next chapter.",
            "Why is it useful to know the memory address?\nPointers are important in C, because they allow us to manipulate the data in the computer's memory - this can reduce the code and improve the performance.\nPointers are one of the things that make C stand out from other \n  programming languages, like Python and Java.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int myAge = 43;printf(\"%p\", &myAge); // Outputs 0x7ffe5367e044"
            }
        ],
        "tables": []
    }
]