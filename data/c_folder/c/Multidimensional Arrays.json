[
    {
        "title": "Multidimensional Arrays",
        "text": [
            "In the previous chapter, you learned about arrays, which is also known as \nsingle dimension arrays. These are great, and something you will use a lot while programming in C. However, if you want to store data as a tabular form, like a table with rows and columns, you need to get familiar with \nmultidimensional arrays.",
            "A multidimensional array is basically an array of arrays.",
            "Arrays can have any number of dimensions. In this chapter, we will introduce the most common; two-dimensional arrays \n(2D)."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Two-Dimensional Arrays",
        "text": [
            "A 2D array is also known as a matrix (a table of rows and columns).",
            "To create a 2D array of integers, take a look at the following example:",
            "int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };",
            "The first dimension represents the number of rows [2], while the second \ndimension represents the number of columns [3]. The values are placed in \nrow-order, and can be visualized like this:",
            ""
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Access the Elements of a 2D Array",
        "text": [
            "To access an element of a two-dimensional array, you must specify the index \nnumber of both the row and column.",
            "This statement accesses the value of the element in the first row (0) and third column \n(2) of the matrix array.",
            "Example\n\n  int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };printf(\"%d\", \n  matrix[0][2]);  // Outputs 2\nTry it Yourself »",
            "Remember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };printf(\"%d\", \n  matrix[0][2]);  // Outputs 2"
            }
        ],
        "tables": []
    },
    {
        "title": "Change Elements in a 2D Array",
        "text": [
            "To change the value of an element, refer to the index number of the element in each of the dimensions:",
            "The following example will change the value of the element in the \nfirst row (0) and first column (0):",
            "Example\n\n  int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };matrix[0][0] = 9;\n  printf(\"%d\", matrix[0][0]);  // Now outputs 9 instead of 1\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };matrix[0][0] = 9;\n  printf(\"%d\", matrix[0][0]);  // Now outputs 9 instead of 1"
            }
        ],
        "tables": []
    },
    {
        "title": "Loop Through a 2D Array",
        "text": [
            "To loop through a multi-dimensional array, you need one loop for each of the array's dimensions.",
            "The following example outputs all elements in the matrix array:",
            "Example\n\n  int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };int i, j;for (i = 0; \n  i < 2; i++) {  for (j = 0; j < 3; j++) {    \n  printf(\"%d\\n\", matrix[i][j]);  }}\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };int i, j;for (i = 0; \n  i < 2; i++) {  for (j = 0; j < 3; j++) {    \n  printf(\"%d\\n\", matrix[i][j]);  }}"
            }
        ],
        "tables": []
    }
]