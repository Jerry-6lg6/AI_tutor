[
    {
        "title": "Operators",
        "text": [
            "Operators are used to perform operations on variables and values.",
            "In the example below, we use the\n+ operator to add together two values:",
            "Example\n\n  int myNum = 100 + 50;\nTry it Yourself »",
            "Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:",
            "Example\n\n  int sum1 = 100 + 50;        \n  // 150 (100 + 50)\n  int sum2 = sum1 + 250;      // 400 (150 + 250)\n  int sum3 = sum2 + sum2;     // 800 (400 + 400)\nTry it Yourself »",
            "C divides the operators into the following groups:"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int myNum = 100 + 50;"
            },
            {
                "heading": "Example",
                "code": "int sum1 = 100 + 50;        \n  // 150 (100 + 50)\n  int sum2 = sum1 + 250;      // 400 (150 + 250)\n  int sum3 = sum2 + sum2;     // 800 (400 + 400)"
            }
        ],
        "tables": []
    },
    {
        "title": "Arithmetic Operators",
        "text": [
            "Arithmetic operators are used to perform common mathematical operations.",
            "Operator\nName\nDescription\nExample\nTry it\n\n\n+\nAddition\nAdds together two values\nx + y\nTry it »\n\n\n-\nSubtraction\nSubtracts one value from another\nx - y\nTry it »\n\n\n*\nMultiplication\nMultiplies two values\nx * y\nTry it »\n\n\n/\nDivision\nDivides one value by another\nx / y\nTry it »\n\n\n%\nModulus\nReturns the division remainder\nx % y\nTry it »\n\n\n++\nIncrement\nIncreases the value of a variable by 1\n++x\nTry it »\n\n\n--\nDecrement\nDecreases the value of a variable by 1\n--x\nTry it »"
        ],
        "examples": [],
        "tables": [
            [
                {
                    "Operator": "+",
                    "Name": "Addition",
                    "Description": "Adds together two values",
                    "Example": "x + y",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "-",
                    "Name": "Subtraction",
                    "Description": "Subtracts one value from another",
                    "Example": "x - y",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "*",
                    "Name": "Multiplication",
                    "Description": "Multiplies two values",
                    "Example": "x * y",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "/",
                    "Name": "Division",
                    "Description": "Divides one value by another",
                    "Example": "x / y",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "%",
                    "Name": "Modulus",
                    "Description": "Returns the division remainder",
                    "Example": "x % y",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "++",
                    "Name": "Increment",
                    "Description": "Increases the value of a variable by 1",
                    "Example": "++x",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "--",
                    "Name": "Decrement",
                    "Description": "Decreases the value of a variable by 1",
                    "Example": "--x",
                    "Try it": "Try it »"
                }
            ]
        ]
    },
    {
        "title": "Assignment Operators",
        "text": [
            "Assignment operators are used to assign values to variables.",
            "In the example below, we use the assignment operator (=) \nto assign the value 10 to a variable called x:",
            "Example\n\nint x = 10;\nTry it Yourself »",
            "The addition assignment operator (+=) adds a value to a variable:",
            "Example\n\nint x = 10;x += 5;\nTry it Yourself »",
            "A list of all assignment operators:",
            "Operator\nExample\nSame As\nTry it\n\n\n=\nx = 5\nx = 5\nTry it »\n\n\n+=\nx += 3\nx = x + 3\nTry it »\n\n\n-=\nx -= 3\nx = x - 3\nTry it »\n\n\n*=\nx *= 3\nx = x * 3\nTry it »\n\n\n/=\nx /= 3\nx = x / 3\nTry it »\n\n\n%=\nx %= 3\nx = x % 3\nTry it »\n\n\n&=\nx &= 3\nx = x & 3\nTry it »\n\n\n|=\nx |= 3\nx = x | 3\nTry it »\n\n\n^=\nx ^= 3\nx = x ^ 3\nTry it »\n\n\n>>=\nx >>= 3\nx = x >> 3\nTry it »\n\n\n<<=\nx <<= 3\nx = x << 3\nTry it »",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int x = 10;"
            },
            {
                "heading": "Example",
                "code": "int x = 10;x += 5;"
            }
        ],
        "tables": [
            [
                {
                    "Operator": "=",
                    "Example": "x = 5",
                    "Same As": "x = 5",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "+=",
                    "Example": "x += 3",
                    "Same As": "x = x + 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "-=",
                    "Example": "x -= 3",
                    "Same As": "x = x - 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "*=",
                    "Example": "x *= 3",
                    "Same As": "x = x * 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "/=",
                    "Example": "x /= 3",
                    "Same As": "x = x / 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "%=",
                    "Example": "x %= 3",
                    "Same As": "x = x % 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "&=",
                    "Example": "x &= 3",
                    "Same As": "x = x & 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "|=",
                    "Example": "x |= 3",
                    "Same As": "x = x | 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "^=",
                    "Example": "x ^= 3",
                    "Same As": "x = x ^ 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": ">>=",
                    "Example": "x >>= 3",
                    "Same As": "x = x >> 3",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "<<=",
                    "Example": "x <<= 3",
                    "Same As": "x = x << 3",
                    "Try it": "Try it »"
                }
            ]
        ]
    },
    {
        "title": "Comparison Operators",
        "text": [
            "Comparison operators are used to compare two values (or variables). This is important in programming, because it helps us to find answers and make decisions.",
            "The return value of a comparison is either 1 or 0, which means true (1) or false (0). These values are known as \nBoolean values, and you will learn more about them in the Booleans and If..Else chapter.",
            "In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:",
            "Example\n\n  int x = 5;int y = 3;printf(\"%d\", x > y); // returns 1 (true) because 5 is greater than 3\nTry it Yourself »",
            "A list of all comparison operators:",
            "Operator\nName\nExample\nDescription\nTry it\n\n\n==\nEqual to\nx == y\nReturns 1 if the values are equal\nTry it »\n\n\n!=\nNot equal\nx != y\nReturns 1 if the values are not equal\nTry it »\n\n\n>\nGreater than\nx > y\nReturns 1 if the first value is greater than the second value\nTry it »\n\n\n<\nLess than\nx < y\nReturns 1 if the first value is less than the second value\nTry it »\n\n\n>=\nGreater than or equal to\nx >= y\nReturns 1 if the first value is greater than, or equal to, the second value\nTry it »\n\n\n<=\nLess than or equal to\nx <= y\nReturns 1 if the first value is less than, or equal to, the second value\nTry it »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int x = 5;int y = 3;printf(\"%d\", x > y); // returns 1 (true) because 5 is greater than 3"
            }
        ],
        "tables": [
            [
                {
                    "Operator": "==",
                    "Name": "Equal to",
                    "Example": "x == y",
                    "Description": "Returns 1 if the values are equal",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "!=",
                    "Name": "Not equal",
                    "Example": "x != y",
                    "Description": "Returns 1 if the values are not equal",
                    "Try it": "Try it »"
                },
                {
                    "Operator": ">",
                    "Name": "Greater than",
                    "Example": "x > y",
                    "Description": "Returns 1 if the first value is greater than the second value",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "<",
                    "Name": "Less than",
                    "Example": "x < y",
                    "Description": "Returns 1 if the first value is less than the second value",
                    "Try it": "Try it »"
                },
                {
                    "Operator": ">=",
                    "Name": "Greater than or equal to",
                    "Example": "x >= y",
                    "Description": "Returns 1 if the first value is greater than, or equal to, the second value",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "<=",
                    "Name": "Less than or equal to",
                    "Example": "x <= y",
                    "Description": "Returns 1 if the first value is less than, or equal to, the second value",
                    "Try it": "Try it »"
                }
            ]
        ]
    },
    {
        "title": "Logical Operators",
        "text": [
            "You can also test for true or false values with logical operators.",
            "Logical operators are used to determine the logic between variables or \nvalues, by combining multiple conditions:",
            "Operator\nName\nExample\nDescription\nTry it\n\n\n&& \nAND\nx < 5 &&  x < 10\nReturns 1 if both statements are true\nTry it »\n\n\n|| \nOR\nx < 5 || x < 4\nReturns 1 if one of the statements is true\nTry it »\n\n\n!\nNOT\n!(x < 5 && x < 10)\nReverse the result, returns 0 if the result is 1\nTry it »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [],
        "tables": [
            [
                {
                    "Operator": "&&",
                    "Name": "AND",
                    "Example": "x < 5 &&  x < 10",
                    "Description": "Returns 1 if both statements are true",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "||",
                    "Name": "OR",
                    "Example": "x < 5 || x < 4",
                    "Description": "Returns 1 if one of the statements is true",
                    "Try it": "Try it »"
                },
                {
                    "Operator": "!",
                    "Name": "NOT",
                    "Example": "!(x < 5 && x < 10)",
                    "Description": "Reverse the result, returns 0 if the result is 1",
                    "Try it": "Try it »"
                }
            ]
        ]
    }
]