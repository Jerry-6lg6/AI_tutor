[
    {
        "title": "Parameters and Arguments",
        "text": [
            "Information can be passed to functions as a parameter. Parameters act as \nvariables inside the function.",
            "Parameters are specified after the function name, inside the parentheses.\nYou can add as many parameters as you want, just separate them with a comma:",
            "Syntax\n\nreturnType functionName(parameter1, parameter2, parameter3) {  \n  // code to be executed}",
            "In the example below, \nthe function takes a string of characters with name as \nparameter. When the function is called, we pass along a name, which is used \ninside the function to print \"Hello\" and the name of each person:",
            "Example\n\n  void myFunction(char name[]) {  printf(\"Hello %s\\n\", name);}int main() {  \n  myFunction(\"Liam\");  myFunction(\"Jenny\");  \n  myFunction(\"Anja\");  return 0;}// Hello Liam\n  // Hello Jenny// Hello Anja\n\nTry it Yourself »",
            "When a parameter is passed to the function, it is called an argument. So, from the example above: \nname is a parameter, while Liam, Jenny and Anja are arguments."
        ],
        "examples": [
            {
                "heading": "Syntax",
                "code": "returnType functionName(parameter1, parameter2, parameter3) {  \n  // code to be executed}"
            },
            {
                "heading": "Example",
                "code": "void myFunction(char name[]) {  printf(\"Hello %s\\n\", name);}int main() {  \n  myFunction(\"Liam\");  myFunction(\"Jenny\");  \n  myFunction(\"Anja\");  return 0;}// Hello Liam\n  // Hello Jenny// Hello Anja"
            }
        ],
        "tables": []
    },
    {
        "title": "Multiple Parameters",
        "text": [
            "Inside the function, you can add as many parameters as you want:",
            "Example\n\n  void myFunction(char name[], int age) {  printf(\"Hello %s. \n  You are %d years old.\\n\", name, age);}int main() {  \n  myFunction(\"Liam\", 3);  myFunction(\"Jenny\", 14);  \n  myFunction(\"Anja\", 30);  return 0;}// Hello Liam. \n  You are 3 years old.// \n  Hello Jenny. You are 14 years old.\n  // Hello Anja. You are 30 years old.\n\nTry it Yourself »",
            "If we consider the \"Calculate the Sum of Numbers\" example \nfrom the previous page, we can make a more sustainable program by using function parameters:",
            "Example\n\n  void calculateSum(int x, int y) {  int sum = x + y;  \n  printf(\"The sum of %d + %d is: %d\\n\", x, y, sum);}int main() {  \n  calculateSum(5, 3);  calculateSum(8, 2);  calculateSum(15, \n  15);  return 0;}\n\nTry it Yourself »",
            "Notes on Parameters\nNote that when you are working with multiple parameters, the function call must \nhave the same number of arguments as there are parameters, and the arguments must be passed in the same order.",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "void myFunction(char name[], int age) {  printf(\"Hello %s. \n  You are %d years old.\\n\", name, age);}int main() {  \n  myFunction(\"Liam\", 3);  myFunction(\"Jenny\", 14);  \n  myFunction(\"Anja\", 30);  return 0;}// Hello Liam. \n  You are 3 years old.// \n  Hello Jenny. You are 14 years old.\n  // Hello Anja. You are 30 years old."
            },
            {
                "heading": "Example",
                "code": "void calculateSum(int x, int y) {  int sum = x + y;  \n  printf(\"The sum of %d + %d is: %d\\n\", x, y, sum);}int main() {  \n  calculateSum(5, 3);  calculateSum(8, 2);  calculateSum(15, \n  15);  return 0;}"
            }
        ],
        "tables": []
    },
    {
        "title": "Pass Arrays as Function Parameters",
        "text": [
            "You can also pass arrays to a function:",
            "Example\n\n  void myFunction(int myNumbers[5]) {  for (int i = 0; i < 5; i++) {    \n  printf(\"%d\\n\", myNumbers[i]);  }}int main() {  int \n  myNumbers[5] = {10, 20, 30, 40, 50};   myFunction(myNumbers);  \n  return 0;}\n\nTry it Yourself »",
            "Example Explained\nThe function (myFunction) takes an array as its parameter (int myNumbers[5]), and loops through the array elements with the for loop.\nWhen the function is called inside main(), we pass along the myNumbers \n  array, which outputs the array elements.\nNote that when you call the function, you only need to use the name of the array when passing it as an argument myFunction(myNumbers). However, the full declaration of the array is needed in the function parameter (int myNumbers[5])."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "void myFunction(int myNumbers[5]) {  for (int i = 0; i < 5; i++) {    \n  printf(\"%d\\n\", myNumbers[i]);  }}int main() {  int \n  myNumbers[5] = {10, 20, 30, 40, 50};   myFunction(myNumbers);  \n  return 0;}"
            }
        ],
        "tables": []
    },
    {
        "title": "Return Values",
        "text": [
            "The void keyword, used in the previous examples, indicates that the \nfunction should not return a value. If you \nwant the function to return a value, you can use a data type (such as int \nor \nfloat, etc.) instead of void, and use the return \nkeyword inside the function:",
            "Example\n\nint myFunction(int x) {  return 5 + x;}int main() {  \n    printf(\"Result is: %d\", myFunction(3));  return 0;}// Outputs \n  8 (5 + 3)\n\nTry it Yourself »",
            "This example returns the sum of a function with two parameters:",
            "Example\n\n  int myFunction(int x, int y) {  return x + y;}int main() \n  {  printf(\"Result is: %d\", myFunction(5, 3));  return 0;\n  }\n  // Outputs 8 (5 + 3)\n\nTry it Yourself »",
            "You can also store the result in a variable:",
            "Example\n\n  int myFunction(int x, int y) {  return x + y;}int main() \n  {   int result = myFunction(5, 3);   printf(\"Result is = \n  %d\", result);  return 0;}\n  // Outputs 8 (5 + 3)\n\nTry it Yourself »",
            "If we consider the \"Calculate the Sum of Numbers\" example one more time, we can use return \ninstead and store the results in different variables. This will make the program \neven more flexible and easier to control:",
            "Example\n\n  int calculateSum(int x, int y) {  return x + y;}int main() {  \n  int result1 = calculateSum(5, 3);  int result2 = calculateSum(8, 2);  \n  int result3 = calculateSum(15, 15);  printf(\"Result1 is: \n  %d\\n\", result1);  printf(\"Result2 is: %d\\n\", result2);  \n  printf(\"Result3 is: %d\\n\", result3);  return 0;}\n\nTry it Yourself »",
            "Tip: If you have many \"result variables\", it is better to store the results in an array:",
            "Example\n\n  int calculateSum(int x, int y) {  return x + y;}int main() {\n    // Create an array  int resultArr[6];  // \n  Call the function with different arguments and store the results in \n  the array  resultArr[0] = calculateSum(5, 3);  resultArr[1] \n  = calculateSum(8, 2);  resultArr[2] = calculateSum(15, 15);  \n  resultArr[3] = calculateSum(9, 1);  resultArr[4] = calculateSum(7, \n  7);  resultArr[5] = calculateSum(1, 1);  for (int i = 0; \n  i < 6; i++) {    printf(\"Result%d is = %d\\n\", i + 1, \n  resultArr[i]);  }  return 0;}\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int myFunction(int x) {  return 5 + x;}int main() {  \n    printf(\"Result is: %d\", myFunction(3));  return 0;}// Outputs \n  8 (5 + 3)"
            },
            {
                "heading": "Example",
                "code": "int myFunction(int x, int y) {  return x + y;}int main() \n  {  printf(\"Result is: %d\", myFunction(5, 3));  return 0;\n  }\n  // Outputs 8 (5 + 3)"
            },
            {
                "heading": "Example",
                "code": "int myFunction(int x, int y) {  return x + y;}int main() \n  {   int result = myFunction(5, 3);   printf(\"Result is = \n  %d\", result);  return 0;}\n  // Outputs 8 (5 + 3)"
            },
            {
                "heading": "Example",
                "code": "int calculateSum(int x, int y) {  return x + y;}int main() {  \n  int result1 = calculateSum(5, 3);  int result2 = calculateSum(8, 2);  \n  int result3 = calculateSum(15, 15);  printf(\"Result1 is: \n  %d\\n\", result1);  printf(\"Result2 is: %d\\n\", result2);  \n  printf(\"Result3 is: %d\\n\", result3);  return 0;}"
            },
            {
                "heading": "Example",
                "code": "int calculateSum(int x, int y) {  return x + y;}int main() {\n    // Create an array  int resultArr[6];  // \n  Call the function with different arguments and store the results in \n  the array  resultArr[0] = calculateSum(5, 3);  resultArr[1] \n  = calculateSum(8, 2);  resultArr[2] = calculateSum(15, 15);  \n  resultArr[3] = calculateSum(9, 1);  resultArr[4] = calculateSum(7, \n  7);  resultArr[5] = calculateSum(1, 1);  for (int i = 0; \n  i < 6; i++) {    printf(\"Result%d is = %d\\n\", i + 1, \n  resultArr[i]);  }  return 0;}"
            }
        ],
        "tables": []
    },
    {
        "title": "Real-Life Example",
        "text": [
            "To demonstrate a practical example of using functions, let's create a program that converts a value from fahrenheit to celsius:",
            "Example\n\n  // Function to convert Fahrenheit to Celsiusfloat toCelsius(float \n  fahrenheit) {  return (5.0 / 9.0) * (fahrenheit - 32.0);}\n  int main() {  // Set a fahrenheit value  float f_value = \n  98.8;  // Call the function with the fahrenheit value  \n  float result = toCelsius(f_value);  // Print the fahrenheit value  \n  printf(\"Fahrenheit: %.2f\\n\", f_value);  // Print the result  \n  printf(\"Convert Fahrenheit to Celsius: %.2f\\n\", result);  return \n  0;}\n\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "// Function to convert Fahrenheit to Celsiusfloat toCelsius(float \n  fahrenheit) {  return (5.0 / 9.0) * (fahrenheit - 32.0);}\n  int main() {  // Set a fahrenheit value  float f_value = \n  98.8;  // Call the function with the fahrenheit value  \n  float result = toCelsius(f_value);  // Print the fahrenheit value  \n  printf(\"Fahrenheit: %.2f\\n\", f_value);  // Print the result  \n  printf(\"Convert Fahrenheit to Celsius: %.2f\\n\", result);  return \n  0;}"
            }
        ],
        "tables": []
    }
]