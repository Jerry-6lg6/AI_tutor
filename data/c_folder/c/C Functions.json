[
    {
        "title": "Predefined Functions",
        "text": [
            "So it turns out you already know what a function is. You have been using it the whole time \nwhile studying this tutorial!",
            "For example, main() is a function, which is used to execute code, \nand printf() is a function; used to output/print text to the screen:",
            "Example\n\n  int main() {  printf(\"Hello World!\");  \n  return 0;}\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int main() {  printf(\"Hello World!\");  \n  return 0;}"
            }
        ],
        "tables": []
    },
    {
        "title": "Create a Function",
        "text": [
            "To create (often referred to as declare) your own function, specify the name of the function, followed by parentheses () \nand curly brackets {}:",
            "Syntax\n\n    void myFunction() {  \n  // code to be executed}"
        ],
        "examples": [
            {
                "heading": "Syntax",
                "code": "void myFunction() {  \n  // code to be executed}"
            }
        ],
        "tables": []
    },
    {
        "title": "Call a Function",
        "text": [
            "Declared functions are not executed immediately. They are \"saved for later \nuse\", and will be executed when they are called.",
            "To call a function, write the function's name followed by two parentheses () \nand a semicolon ;",
            "In the following example, myFunction() is used to print a text (the action), when it is called:",
            "Example\nInside main, \ncall \nmyFunction():\n\n  // Create a functionvoid myFunction() {  printf(\"I just got \n  executed!\");}int main() {  \n  myFunction(); // call the function  return 0;}// Outputs \n  \"I just got executed!\"\n\nTry it Yourself »",
            "A function can be called multiple times:",
            "Example\n\n  void myFunction() {  printf(\"I just got executed!\");}int main() {  \n  myFunction();  myFunction();  \n  myFunction();  return 0;}// \n  I just got executed!// I just got executed!// I just got executed!\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "// Create a functionvoid myFunction() {  printf(\"I just got \n  executed!\");}int main() {  \n  myFunction(); // call the function  return 0;}// Outputs \n  \"I just got executed!\""
            },
            {
                "heading": "Example",
                "code": "void myFunction() {  printf(\"I just got executed!\");}int main() {  \n  myFunction();  myFunction();  \n  myFunction();  return 0;}// \n  I just got executed!// I just got executed!// I just got executed!"
            }
        ],
        "tables": []
    },
    {
        "title": "Calculate the Sum of Numbers",
        "text": [
            "You can put almost whatever you want inside a function. The purpose of the function is to save the code, and execute it when you need it.",
            "Like in the example below, we have created a function to calculate \nthe sum of two numbers. Whenever you are \nready to execute the function (and perform the calculation), you just call it:",
            "Example\n\n  void \n  calculateSum() {  int x = 5;  int y = 10;  int sum = \n  x + y;  printf(\"The sum of x + y is: %d\", sum);}int main() {  \n  calculateSum();  // call the function  return 0;}// Outputs The \n  sum of x + y is: 15\n\nTry it Yourself »",
            "This was just an example to demonstrate a simple function with different \nstatements in C. The real power of \na function is revealed in the next chapter, when we \npass \"parameters\" to it.\nThis allows the function to calculate the sum of any numbers, \ninstead of being limited to the fixed values 5 and 10.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "void \n  calculateSum() {  int x = 5;  int y = 10;  int sum = \n  x + y;  printf(\"The sum of x + y is: %d\", sum);}int main() {  \n  calculateSum();  // call the function  return 0;}// Outputs The \n  sum of x + y is: 15"
            }
        ],
        "tables": []
    }
]