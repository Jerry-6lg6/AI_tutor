[
    {
        "title": "Java Booleans",
        "text": [
            "Very often, in programming, you will need a data type that can only have one of two values, like:",
            "For this, Java has a boolean data type, which can store true or false values."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Boolean Values",
        "text": [
            "A boolean type is declared with the boolean keyword and can only take the values true or false:",
            "Example\nboolean isJavaFun = true;\nboolean isFishTasty = false;\nSystem.out.println(isJavaFun);     // Outputs true\nSystem.out.println(isFishTasty);   // Outputs false\n\n\nTry it Yourself »",
            "However, it is more common to return boolean values from boolean expressions, for conditional testing\n(see below)."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Boolean Expression",
        "text": [
            "A Boolean expression returns a boolean value: true or false.",
            "This is useful to build logic, and find answers.",
            "For example, you can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or a variable) is true or false:",
            "Example\nint x = 10;\nint y = 9;\nSystem.out.println(x > y); // returns true, because 10 is higher than 9\n\n\nTry it Yourself »",
            "Or even easier:",
            "Example\nSystem.out.println(10 > 9); // returns true, because 10 is higher than 9\n\n\nTry it Yourself »",
            "In the examples below, we use the equal to (==) operator to evaluate an expression:",
            "Example\nint x = 10;\nSystem.out.println(x == 10); // returns true, because the value of x is equal to 10\n\n\nTry it Yourself »",
            "Example\nSystem.out.println(10 == 15); // returns false, because 10 is not equal to 15\n\n\nTry it Yourself »"
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Real Life Example",
        "text": [
            "Let's think of a \"real \nlife example\" where we need to find out if a person is old enough to vote.",
            "In the example below, we use the >= comparison operator to find out if the age (25) is greater than OR \nequal to the voting age limit, which is set \nto 18:",
            "Example\nint myAge = 25;\nint votingAge = 18;\nSystem.out.println(myAge >= votingAge);\n\nTry it Yourself »",
            "Cool, right? An even better approach (since we are on a roll now), would be to wrap the code above in an \nif...else statement, so we can perform \ndifferent actions depending on the result:",
            "Example\nOutput \"Old enough to vote!\" if myAge is greater than or equal to 18. Otherwise output \"Not old enough to vote.\":\nint myAge = 25;\nint votingAge = 18;\n\nif (myAge >= votingAge) {\n  System.out.println(\"Old enough to vote!\");\n} else {\n  System.out.println(\"Not old enough to vote.\");\n}\n\nTry it Yourself »",
            "Booleans are the basis for all Java comparisons and conditions.\nYou will learn more about conditions (if...else) in the next chapter.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [],
        "tables": []
    }
]