[
    {
        "title": "SQL Injection",
        "text": [
            "SQL injection is a code injection technique that might destroy your database.",
            "SQL injection is one of the most common web hacking techniques.",
            "SQL injection is the placement of malicious code in SQL statements, via web page input."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "SQL in Web Pages",
        "text": [
            "SQL injection usually occurs when you ask a user for input, like their \nusername/userid, and instead of a name/id, the user gives you an SQL statement \nthat you will unknowingly run on your database.",
            "Look at the following example which creates a \nSELECT statement by adding a variable \n(txtUserId) to a select string. The variable is fetched from user input \n(getRequestString):",
            "Example\n\n txtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = \" + txtUserId;",
            "The rest of this chapter describes the potential dangers of using user input in SQL statements."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "txtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = \" + txtUserId;"
            }
        ],
        "tables": []
    },
    {
        "title": "SQL Injection Based on 1=1 is Always True",
        "text": [
            "Look at the example above again. The original purpose of the code was to create an SQL statement to select a \nuser, with a given user id.",
            "If there is nothing to prevent a user from entering \"wrong\" input, the user \ncan enter some \"smart\" input like this:",
            "UserId:",
            "Then, the SQL statement will look like this:",
            "SELECT * FROM Users WHERE UserId = 105 OR 1=1;",
            "The SQL above is valid and will return ALL rows from the \"Users\" table, since \nOR 1=1 is always TRUE.",
            "Does the example above look dangerous? What if the \"Users\" table contains names and passwords?",
            "The SQL statement above is much the same as this:",
            "SELECT UserId, Name, Password\nFROM Users WHERE UserId = 105 or 1=1;",
            "A hacker might get access to all the user names and passwords in a database, by \nsimply inserting \n105 OR 1=1 into the input field.",
            ""
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "SQL Injection Based on \"\"=\"\" is Always True",
        "text": [
            "Here is an example of a user login on a web site:",
            "Username:",
            "Password:",
            "Example\n\nuName = getRequestString(\"username\");uPass = getRequestString(\"userpassword\");\nsql = 'SELECT * FROM Users WHERE Name =\"' + uName + '\" AND Pass =\"' + uPass + \n '\"'",
            "Result\n\nSELECT * FROM Users WHERE Name =\"John Doe\" AND Pass =\"myPass\"",
            "A hacker might get access to user names and passwords in a database by \nsimply inserting \" OR \"\"=\" into the user name or password text box:",
            "User Name:",
            "Password:",
            "The code at the server will create a valid SQL statement like this:",
            "Result\n\nSELECT * FROM Users WHERE Name =\"\" or \"\"=\"\" AND Pass =\"\" or \"\"=\"\"",
            "The SQL above is valid and will return all rows from the \"Users\" table, \nsince OR \"\"=\"\" is always TRUE."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "uName = getRequestString(\"username\");uPass = getRequestString(\"userpassword\");\nsql = 'SELECT * FROM Users WHERE Name =\"' + uName + '\" AND Pass =\"' + uPass + \n '\"'"
            },
            {
                "heading": "Result",
                "code": "SELECT * FROM Users WHERE Name =\"John Doe\" AND Pass =\"myPass\""
            },
            {
                "heading": "Result",
                "code": "SELECT * FROM Users WHERE Name =\"\" or \"\"=\"\" AND Pass =\"\" or \"\"=\"\""
            }
        ],
        "tables": []
    },
    {
        "title": "SQL Injection Based on Batched SQL Statements",
        "text": [
            "Most databases support batched SQL statement.",
            "A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.",
            "The SQL statement below will return all rows from the \"Users\" table, then delete the \n\"Suppliers\" table.",
            "Example\n\nSELECT * FROM Users; DROP TABLE Suppliers",
            "Look at the following example:",
            "Example\n\ntxtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = \" + txtUserId;",
            "And the following input:",
            "User id:",
            "The valid SQL statement would look like this:",
            "Result\n\nSELECT * FROM Users WHERE \nUserId = 105; DROP TABLE Suppliers;"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "SELECT * FROM Users; DROP TABLE Suppliers"
            },
            {
                "heading": "Example",
                "code": "txtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = \" + txtUserId;"
            },
            {
                "heading": "Result",
                "code": "SELECT * FROM Users WHERE \nUserId = 105; DROP TABLE Suppliers;"
            }
        ],
        "tables": []
    },
    {
        "title": "Use SQL Parameters for Protection",
        "text": [
            "To protect a web site from SQL injection, you can use SQL parameters.",
            "SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.",
            "ASP.NET Razor Example\n\ntxtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = @0\";db.Execute(txtSQL,txtUserId);",
            "Note that parameters are represented in the SQL statement by a @ marker.",
            "The SQL engine checks each parameter to ensure that it is correct for its column\nand are treated literally, and not as part of the SQL to be executed.",
            "Another Example\n\n txtNam = getRequestString(\"CustomerName\");txtAdd = getRequestString(\"Address\");txtCit = getRequestString(\"City\");\n txtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";db.Execute(txtSQL,txtNam,txtAdd,txtCit);"
        ],
        "examples": [
            {
                "heading": "ASP.NET Razor Example",
                "code": "txtUserId = getRequestString(\"UserId\");txtSQL = \"SELECT *\nFROM Users WHERE UserId = @0\";db.Execute(txtSQL,txtUserId);"
            },
            {
                "heading": "Another Example",
                "code": "txtNam = getRequestString(\"CustomerName\");txtAdd = getRequestString(\"Address\");txtCit = getRequestString(\"City\");\n txtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";db.Execute(txtSQL,txtNam,txtAdd,txtCit);"
            }
        ],
        "tables": []
    },
    {
        "title": "Examples",
        "text": [
            "The following examples shows how to build parameterized queries in some common web languages.",
            "SELECT STATEMENT IN ASP.NET:",
            "txtUserId = getRequestString(\"UserId\");\n sql = \"SELECT * FROM Customers WHERE CustomerId = @0\";command = new SqlCommand(sql);command.Parameters.AddWithValue(\"@0\",txtUserId);\n command.ExecuteReader();",
            "INSERT INTO STATEMENT IN ASP.NET:",
            "txtNam = getRequestString(\"CustomerName\");txtAdd = getRequestString(\"Address\");txtCit = getRequestString(\"City\");\n txtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";command = new SqlCommand(txtSQL);\n command.Parameters.AddWithValue(\"@0\",txtNam);\n command.Parameters.AddWithValue(\"@1\",txtAdd);\n command.Parameters.AddWithValue(\"@2\",txtCit);command.ExecuteNonQuery();",
            "INSERT INTO STATEMENT IN PHP:",
            "$stmt = $dbh->prepare(\"INSERT INTO Customers (CustomerName,Address,City) \n VALUES (:nam, :add, :cit)\");$stmt->bindParam(':nam', $txtNam);\n $stmt->bindParam(':add', $txtAdd);$stmt->bindParam(':cit', $txtCit);\n $stmt->execute();",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [],
        "tables": []
    }
]