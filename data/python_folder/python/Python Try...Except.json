[
    {
        "title": "Exception Handling",
        "text": [
            "When an error occurs, or exception as we call it, Python will normally stop and \ngenerate an error message.",
            "These exceptions can be handled using the try statement:",
            "Example\nThe try block will generate an exception, \n  because x is not defined:\n\n  try:  print(x)except:  print(\"An exception occurred\")\nTry it Yourself »",
            "Since the try block raises an error, the except block will be executed.",
            "Without the try block, the program will crash and raise an error:",
            "Example\nThis statement will raise an error, \n  because x is not defined:\n\n  print(x)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "try:  print(x)except:  print(\"An exception occurred\")"
            },
            {
                "heading": "Example",
                "code": "print(x)"
            }
        ],
        "tables": []
    },
    {
        "title": "Many Exceptions",
        "text": [
            "You can define as many exception blocks as you want, e.g. if you want to execute a \nspecial block of code for a special kind of error:",
            "Example\nPrint one message if the try block raises a NameError and another \n  for other errors:\n\n  try:  print(x)except NameError:  print(\"Variable x \n  is not defined\")except:  print(\"Something else went \n  wrong\")\nTry it Yourself »",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "try:  print(x)except NameError:  print(\"Variable x \n  is not defined\")except:  print(\"Something else went \n  wrong\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Else",
        "text": [
            "You can use the else keyword to define a \nblock of code to be executed if no errors were raised:",
            "Example\nIn this example, the try block does not \n  generate any error:\n\n  try:  print(\"Hello\")except:  print(\"Something went \n  wrong\")else:  print(\"Nothing went wrong\")\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "try:  print(\"Hello\")except:  print(\"Something went \n  wrong\")else:  print(\"Nothing went wrong\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Finally",
        "text": [
            "The finally block, if specified, will be executed \nregardless if the try block \nraises an error or not.",
            "Example\n\n  try:  print(x)except:  print(\"Something went \n  wrong\")finally:  print(\"The 'try except' is finished\")\nTry it Yourself »",
            "This can be useful to close objects and clean up resources:",
            "Example\nTry to open and write to a file that is not writable:\n\n  try:  f = open(\"demofile.txt\")  try:    \n  f.write(\"Lorum Ipsum\")  except:    \n  print(\"Something went wrong when writing to the file\")  finally:    \n  f.close()except:  print(\"Something went wrong when opening the \n  file\") \nTry it Yourself »",
            "The program can continue, without leaving the file object open."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "try:  print(x)except:  print(\"Something went \n  wrong\")finally:  print(\"The 'try except' is finished\")"
            },
            {
                "heading": "Example",
                "code": "try:  f = open(\"demofile.txt\")  try:    \n  f.write(\"Lorum Ipsum\")  except:    \n  print(\"Something went wrong when writing to the file\")  finally:    \n  f.close()except:  print(\"Something went wrong when opening the \n  file\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Raise an exception",
        "text": [
            "As a Python developer you can choose to throw an exception if a condition occurs.",
            "To throw (or raise) an exception, use the raise keyword.",
            "Example\nRaise an error and stop the program if x is lower than 0:\n\n    x = -1if x < 0:  raise Exception(\"Sorry, no numbers below \n    zero\")\nTry it Yourself »",
            "The raise keyword is used to raise an \nexception.",
            "You can define what kind of error to raise, and the text to print to the user.",
            "Example\nRaise a TypeError if x is not an integer:\n\n    x = \"hello\"if not type(x) is int:  raise TypeError(\"Only \n    integers are allowed\")\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "x = -1if x < 0:  raise Exception(\"Sorry, no numbers below \n    zero\")"
            },
            {
                "heading": "Example",
                "code": "x = \"hello\"if not type(x) is int:  raise TypeError(\"Only \n    integers are allowed\")"
            }
        ],
        "tables": []
    }
]