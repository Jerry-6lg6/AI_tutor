[
    {
        "title": "Evaluate Your Model",
        "text": [
            "In Machine Learning we create models to predict the outcome of certain events,\nlike in the previous chapter where we predicted the CO2 emission of a car when we knew\nthe weight and engine size.",
            "To measure if the model is good enough, we can use a method called Train/Test."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "What is Train/Test",
        "text": [
            "Train/Test is a method to measure the accuracy of your model.",
            "It is called Train/Test because you split the data set into two sets: a training set and a testing set.",
            "80% for training, and 20% for testing.",
            "You train the model using the training set.",
            "You test the model using the testing set.",
            "Train the model means create the model.\nTest the model means test the accuracy of the model."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Start With a Data Set",
        "text": [
            "Start with a data set you want to test.",
            "Our data set illustrates 100 customers in a shop, and their shopping habits.",
            "Example\n\n  import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show()\nResult:\nThe x axis represents the number of minutes before making a purchase.\nThe y axis represents the amount of money spent on the purchase.\n\n\nRun example »",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "import numpyimport matplotlib.pyplot as pltnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xplt.scatter(x, y)plt.show()"
            }
        ],
        "tables": []
    },
    {
        "title": "Split Into Train/Test",
        "text": [
            "The training set should be a random selection of 80% of the original data.",
            "The testing set should be the remaining 20%.",
            "train_x = x[:80]\ntrain_y = y[:80]\n\ntest_x = x[80:]\ntest_y = y[80:]"
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Display the Training Set",
        "text": [
            "Display the same scatter plot with the training set:",
            "Example\n\n  plt.scatter(train_x, \n  train_y)plt.show()\nResult:\nIt looks like the original data set, so it seems to be a fair \nselection:\n\n\nRun example »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "plt.scatter(train_x, \n  train_y)plt.show()"
            }
        ],
        "tables": []
    },
    {
        "title": "Display the Testing Set",
        "text": [
            "To make sure the testing set is not completely different, we will take a look at the testing set as well.",
            "Example\n\n  plt.scatter(test_x, \n  test_y)plt.show()\nResult:\nThe testing set also looks like the original data set:\n\n\nRun example »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "plt.scatter(test_x, \n  test_y)plt.show()"
            }
        ],
        "tables": []
    },
    {
        "title": "Fit the Data Set",
        "text": [
            "What does the data set look like? In my opinion I think the best fit would be \na polynomial regression, so let us draw a line of polynomial regression.",
            "To draw a line through the data points, we use the \nplot() method of the matplotlib module:",
            "Example\nDraw a polynomial regression line through the data points:\n\n  import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show()\nResult:\n\n\nRun example »",
            "The result can back my suggestion of the data set fitting a polynomial \nregression, even though it would give us some weird results if we try to predict \nvalues outside of the data set. Example: the line indicates that a customer \nspending 6 minutes in the shop would make a purchase worth 200. That is probably \na sign of overfitting.",
            "But what about the R-squared score? The R-squared score is a good indicator \nof how well my data set is fitting the model."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "import numpyimport \n  matplotlib.pyplot as pltnumpy.random.seed(2)x = \n  numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]train_y = y[:80]test_x = x[80:]test_y = \n  y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nmyline = numpy.linspace(0, 6, 100)plt.scatter(train_x, train_y)\n  plt.plot(myline, mymodel(myline))plt.show()"
            }
        ],
        "tables": []
    },
    {
        "title": "R2",
        "text": [
            "Remember R2, also known as R-squared?",
            "It measures the relationship between the x axis and the y \naxis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 \nmeans totally related.",
            "The sklearn module has a method called r2_score() \nthat will help us find this relationship.",
            "In this case we would like to measure the relationship  \nbetween the minutes a customer stays in the shop and how much money they spend.",
            "Example\nHow well does my training data fit in a polynomial regression?\n\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2)\nTry it Yourself »",
            "Note:  The result 0.799 shows that there is a OK relationship."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(train_y, mymodel(train_x))print(r2)"
            }
        ],
        "tables": []
    },
    {
        "title": "Bring in the Testing Set",
        "text": [
            "Now we have made a model that is OK, at least when it comes to training data.",
            "Now we want to test the model with the testing data as well, to see if gives us the \nsame result.",
            "Example\nLet us find the R2 score when using testing data:\n\n  import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2)\nTry it Yourself »",
            "Note:  The result 0.809 shows that the model fits the \n  testing set as well, and we are confident that we can use the model to predict \n  future values."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "import numpyfrom sklearn.metrics import r2_scorenumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)y = numpy.random.normal(150, 40, \n  100) / xtrain_x = x[:80]train_y = y[:80]test_x = x[80:]\n  test_y = y[80:]mymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, \n  4))r2 = r2_score(test_y, mymodel(test_x))print(r2)"
            }
        ],
        "tables": []
    },
    {
        "title": "Predict Values",
        "text": [
            "Now that we have established that our model is OK, we can start predicting \nnew values.",
            "Example\nHow much money will a buying customer spend, if she or he stays in the shop \n  for 5 minutes?\n\n  print(mymodel(5))\nRun example »",
            "The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "print(mymodel(5))"
            }
        ],
        "tables": []
    }
]