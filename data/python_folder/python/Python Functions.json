[
    {
        "title": "Creating a Function",
        "text": [
            "In Python a function is defined using the def \nkeyword:",
            "Example\n\n  def my_function():  print(\"Hello from a function\")"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function():  print(\"Hello from a function\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Calling a Function",
        "text": [
            "To call a function, use the function name followed by parenthesis:",
            "Example\n\n  def my_function():  print(\"Hello from a function\")\nmy_function()\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function():  print(\"Hello from a function\")\nmy_function()"
            }
        ],
        "tables": []
    },
    {
        "title": "Arguments",
        "text": [
            "Information can be passed into functions as arguments.",
            "Arguments are specified after the function name, inside the parentheses.\nYou can add as many arguments as you want, just separate them with a comma.",
            "The following example has a function with one argument (fname).\nWhen the function is called, we pass along a first name,\nwhich is used inside the function to print the full name:",
            "Example\n\n  def my_function(fname):  print(fname + \" Refsnes\")\n  my_function(\"Emil\")my_function(\"Tobias\")my_function(\"Linus\")\nTry it Yourself »",
            "Arguments are often shortened to args in Python documentations.",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(fname):  print(fname + \" Refsnes\")\n  my_function(\"Emil\")my_function(\"Tobias\")my_function(\"Linus\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Parameters or Arguments?",
        "text": [
            "The terms parameter and argument can be used for the same thing: information that are passed into a function.",
            "From a function's perspective:\nA parameter is the variable listed inside the parentheses in the function definition.\nAn argument is the value that is sent to the function when it is called."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Number of Arguments",
        "text": [
            "By default, a function must be called with the correct number of arguments. \nMeaning that if your function expects 2 arguments, you have to call the function \nwith 2 arguments, not more, and not less.",
            "Example\nThis function expects 2 arguments, and gets 2 arguments:\n\n  def my_function(fname, lname):  print(fname + \" \" + lname)\n  my_function(\"Emil\", \"Refsnes\")\nTry it Yourself »",
            "Example\nThis function expects 2 arguments, but gets only 1:\n\n  def my_function(fname, lname):  print(fname + \" \" + lname)\n  my_function(\"Emil\")\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(fname, lname):  print(fname + \" \" + lname)\n  my_function(\"Emil\", \"Refsnes\")"
            },
            {
                "heading": "Example",
                "code": "def my_function(fname, lname):  print(fname + \" \" + lname)\n  my_function(\"Emil\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Arbitrary Arguments, *args",
        "text": [
            "If you do not know how many arguments that will be passed into your function,\nadd a * before the parameter name in the function definition.",
            "This way the function will receive a tuple of arguments, and can access the items accordingly:",
            "Example\nIf the number of arguments is unknown, add a * before the parameter name:\n\n  def my_function(*kids):  print(\"The youngest child \n  is \" + kids[2])\n  my_function(\"Emil\", \"Tobias\", \"Linus\")\nTry it Yourself »",
            "Arbitrary Arguments are often shortened to *args in Python documentations."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(*kids):  print(\"The youngest child \n  is \" + kids[2])\n  my_function(\"Emil\", \"Tobias\", \"Linus\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Keyword Arguments",
        "text": [
            "You can also send arguments with the key = value syntax.",
            "This way the order of the arguments does not matter.",
            "Example\n\n  def my_function(child3, child2, child1):  print(\"The youngest child \n  is \" + child3)\n  my_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")\nTry it Yourself »",
            "The phrase Keyword Arguments are often shortened to kwargs in Python documentations."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(child3, child2, child1):  print(\"The youngest child \n  is \" + child3)\n  my_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Arbitrary Keyword Arguments, **kwargs",
        "text": [
            "If you do not know how many keyword arguments that will be passed into your function,\nadd two asterisk: ** before the parameter name in the function definition.",
            "This way the function will receive a dictionary of arguments, and can access the items accordingly:",
            "Example\nIf the number of keyword arguments is unknown, add a double\n  ** before the parameter name:\n\n  def my_function(**kid):  print(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")\nTry it Yourself »",
            "Arbitrary Kword Arguments are often shortened to **kwargs in Python documentations."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(**kid):  print(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Default Parameter Value",
        "text": [
            "The following example shows how to use a default parameter value.",
            "If we call the function without argument, it uses the default value:",
            "Example\n\n  def my_function(country = \"Norway\"):  print(\"I am from \" + \n  country)\n  my_function(\"Sweden\")my_function(\"India\")my_function()my_function(\"Brazil\")\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(country = \"Norway\"):  print(\"I am from \" + \n  country)\n  my_function(\"Sweden\")my_function(\"India\")my_function()my_function(\"Brazil\")"
            }
        ],
        "tables": []
    },
    {
        "title": "Passing a List as an Argument",
        "text": [
            "You can send any data types of argument to a function (string, number, list, dictionary etc.), \nand it will\nbe treated as the same data type inside the function.",
            "E.g. if you send a List as an argument, it will still be a List when it \nreaches the function:",
            "Example\n\n  def my_function(food):  for x in food:    \n  print(x)fruits = [\"apple\", \"banana\", \"cherry\"]\n  my_function(fruits)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(food):  for x in food:    \n  print(x)fruits = [\"apple\", \"banana\", \"cherry\"]\n  my_function(fruits)"
            }
        ],
        "tables": []
    },
    {
        "title": "Return Values",
        "text": [
            "To let a function return a value, use the return \nstatement:",
            "Example\n\n  def my_function(x):  return 5 * xprint(my_function(3))print(my_function(5))\n  print(my_function(9))\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(x):  return 5 * xprint(my_function(3))print(my_function(5))\n  print(my_function(9))"
            }
        ],
        "tables": []
    },
    {
        "title": "The pass Statement",
        "text": [
            "function definitions cannot be empty, but if \nyou for some reason have a function definition with no content, put in the pass statement to avoid getting an error.",
            "Example\n\n  def myfunction():  pass\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def myfunction():  pass"
            }
        ],
        "tables": []
    },
    {
        "title": "Positional-Only Arguments",
        "text": [
            "You can specify that a function can have ONLY positional arguments, or ONLY keyword arguments.",
            "To specify that a function can have only positional arguments, add , /\nafter the arguments:",
            "Example\n\n  def my_function(x, /):  print(x)my_function(3)\nTry it Yourself »",
            "Without the , / you are actually allowed to use keyword arguments even if the function\nexpects positional arguments:",
            "Example\n\n  def my_function(x):  print(x)my_function(x = 3)\nTry it Yourself »",
            "But when adding the , / you will get an error if you try to send a \nkeyword argument:",
            "Example\n\n  def my_function(x, /):  print(x)my_function(x = 3)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(x, /):  print(x)my_function(3)"
            },
            {
                "heading": "Example",
                "code": "def my_function(x):  print(x)my_function(x = 3)"
            },
            {
                "heading": "Example",
                "code": "def my_function(x, /):  print(x)my_function(x = 3)"
            }
        ],
        "tables": []
    },
    {
        "title": "Keyword-Only Arguments",
        "text": [
            "To specify that a function can have only keyword arguments, add *, \nbefore the arguments:",
            "Example\n\n  def my_function(*, x):  print(x)my_function(x = 3)\nTry it Yourself »",
            "Without the *,  you are allowed to use positionale arguments even if the function\nexpects keyword arguments:",
            "Example\n\n  def my_function(x):  print(x)my_function(3)\nTry it Yourself »",
            "But with the *,  you will get an error if you try to send a \npositional argument:",
            "Example\n\n  def my_function(*, x):  print(x)my_function(3)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(*, x):  print(x)my_function(x = 3)"
            },
            {
                "heading": "Example",
                "code": "def my_function(x):  print(x)my_function(3)"
            },
            {
                "heading": "Example",
                "code": "def my_function(*, x):  print(x)my_function(3)"
            }
        ],
        "tables": []
    },
    {
        "title": "Combine Positional-Only and Keyword-Only",
        "text": [
            "You can combine the two argument types in the same function.",
            "Any argument before the / , are positional-only,\nand any argument after the *,  are keyword-only.",
            "Example\n\n  def my_function(a, b, /, *, c, d):  print(a + b + c + d)\n  my_function(5, 6, c = 7, d = 8)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def my_function(a, b, /, *, c, d):  print(a + b + c + d)\n  my_function(5, 6, c = 7, d = 8)"
            }
        ],
        "tables": []
    },
    {
        "title": "Recursion",
        "text": [
            "Python also accepts function recursion, which means a defined function can call itself.",
            "Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.",
            "The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.",
            "In this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).",
            "To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.",
            "Example\nRecursion Example\n\ndef tri_recursion(k):\n\t \n\tif(k > 0):\n\t\t   \n\t\tresult = k + tri_recursion(k - 1)\n\t\t   \n\t\tprint(result)\n\t \n\telse:\n\t\t   \n\t\tresult = 0\n\t \n\treturn result\n\nprint(\"Recursion Example Results:\")\ntri_recursion(6)\n\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "def tri_recursion(k):\n\t \n\tif(k > 0):\n\t\t   \n\t\tresult = k + tri_recursion(k - 1)\n\t\t   \n\t\tprint(result)\n\t \n\telse:\n\t\t   \n\t\tresult = 0\n\t \n\treturn result\n\nprint(\"Recursion Example Results:\")\ntri_recursion(6)"
            }
        ],
        "tables": []
    }
]