[
    {
        "title": "List",
        "text": [
            "Lists are used to store multiple items in a single variable.",
            "Lists are one of 4 built-in data types in Python used to store collections of \ndata, the other 3 are Tuple, \nSet, and Dictionary, all with different qualities and usage.",
            "Lists are created using square brackets:",
            "Example\nCreate a List:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)"
            }
        ],
        "tables": []
    },
    {
        "title": "List Items",
        "text": [
            "List items are ordered, changeable, and allow duplicate values.",
            "List items are indexed, the first item has index [0],\nthe second item has index [1] etc."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Ordered",
        "text": [
            "When we say that lists are ordered, it means that the items have a defined order, and that order will not change.",
            "If you add new items to a list,\nthe new items will be placed at the end of the list.",
            "Note: There are some list methods that will change the order, but in general: the order of the items will not change."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Changeable",
        "text": [
            "The list is changeable, meaning that we can change, add, and remove items in a list after it has been created."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Allow Duplicates",
        "text": [
            "Since lists are indexed, lists can have items with the same value:",
            "Example\nLists allow duplicate values:\n\nthislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)\n\nTry it Yourself »",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)"
            }
        ],
        "tables": []
    },
    {
        "title": "List Length",
        "text": [
            "To determine how many items a list has, use the \nlen() function:",
            "Example\nPrint the number of items in the list:\n\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))"
            }
        ],
        "tables": []
    },
    {
        "title": "List Items - Data Types",
        "text": [
            "List items can be of any data type:",
            "Example\nString, int and boolean data types:\n\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]\n\nTry it Yourself »",
            "A list can contain different data types:",
            "Example\nA list with strings, integers and boolean values:\n\nlist1 = [\"abc\", 34, True, 40, \"male\"]\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "list1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [1, 5, 7, 9, 3]\nlist3 = [True, False, False]"
            },
            {
                "heading": "Example",
                "code": "list1 = [\"abc\", 34, True, 40, \"male\"]"
            }
        ],
        "tables": []
    },
    {
        "title": "type()",
        "text": [
            "From Python's perspective, lists are defined as objects with the data type 'list':",
            "<class 'list'>",
            "Example\nWhat is the data type of a list?\n\nmylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "mylist = [\"apple\", \"banana\", \"cherry\"]\nprint(type(mylist))"
            }
        ],
        "tables": []
    },
    {
        "title": "The list() Constructor",
        "text": [
            "It is also possible to use the list() constructor when creating a \nnew list.",
            "Example\nUsing the list() constructor to make a List:\n\nthislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)\n\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "thislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thislist)"
            }
        ],
        "tables": []
    },
    {
        "title": "Python Collections (Arrays)",
        "text": [
            "There are four collection data types in the Python programming language:",
            "*Set items are unchangeable, but you can remove and/or add items \n  whenever you like.\n**As of Python version 3.7, dictionaries are ordered. \n  In Python 3.6 and earlier, dictionaries are unordered.",
            "When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [],
        "tables": []
    }
]