[
    {
        "title": "Python Classes/Objects",
        "text": [
            "Python is an object oriented programming language.",
            "Almost everything in Python is an object, with its properties and methods.",
            "A Class is like an object constructor, or a \"blueprint\" for creating objects."
        ],
        "examples": [],
        "tables": []
    },
    {
        "title": "Create a Class",
        "text": [
            "To create a class, use the keyword class:",
            "Example\nCreate a class named MyClass, with a property named x:\n\n  class MyClass:  x = 5\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class MyClass:  x = 5"
            }
        ],
        "tables": []
    },
    {
        "title": "Create Object",
        "text": [
            "Now we can use the class named MyClass to create objects:",
            "Example\nCreate an object named p1, and print the value of x:\n\n  p1 = MyClass()print(p1.x)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "p1 = MyClass()print(p1.x)"
            }
        ],
        "tables": []
    },
    {
        "title": "The __init__() Function",
        "text": [
            "The examples above are classes and objects in their simplest form, and are \nnot really useful in real life applications.",
            "To understand the meaning of classes we have to understand the built-in __init__() \nfunction.",
            "All classes have a function called __init__(), which is always executed when \nthe class is being initiated.",
            "Use the __init__() function to assign values to object properties, or other \noperations that are necessary to do when the object \nis being created:",
            "Example\nCreate a class named Person, use the __init__() function to assign values \nfor name and age:\n\n  class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = agep1 = Person(\"John\", \n  36)\nprint(p1.name)print(p1.age)\nTry it Yourself »",
            "Note: The __init__() function is called automatically every time the class is being used to create a new object.",
            ""
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = agep1 = Person(\"John\", \n  36)\nprint(p1.name)print(p1.age)"
            }
        ],
        "tables": []
    },
    {
        "title": "The __str__() Function",
        "text": [
            "The __str__() function controls what should be returned when the class object \nis represented as a string.",
            "If the __str__() function is not set, the string representation of the object \nis returned:",
            "Example\nThe string representation of an object WITHOUT the __str__() function:\n\n  class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = agep1 = Person(\"John\", \n  36)\nprint(p1)\nTry it Yourself »",
            "Example\nThe string representation of an object WITH the __str__() function:\n\n  class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = age \n  def __str__(self):    return f\"{self.name}({self.age})\"\np1 = Person(\"John\", \n  36)\nprint(p1)\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = agep1 = Person(\"John\", \n  36)\nprint(p1)"
            },
            {
                "heading": "Example",
                "code": "class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = age \n  def __str__(self):    return f\"{self.name}({self.age})\"\np1 = Person(\"John\", \n  36)\nprint(p1)"
            }
        ],
        "tables": []
    },
    {
        "title": "Object Methods",
        "text": [
            "Objects can also contain methods. Methods in objects are functions that \nbelong to the object.",
            "Let us create a method in the Person class:",
            "Example\nInsert a function that prints a greeting, and execute it on the p1 object:\n\n  class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = age  def myfunc(self):    \n  print(\"Hello my name is \" + self.name)p1 = Person(\"John\", \n  36)p1.myfunc()\nTry it Yourself »",
            "Note: The self parameter \n  is a reference to the current instance of the class, and is used to access variables that belong to the class."
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class Person:  def __init__(self, name, age):    \n  self.name = name    self.age = age  def myfunc(self):    \n  print(\"Hello my name is \" + self.name)p1 = Person(\"John\", \n  36)p1.myfunc()"
            }
        ],
        "tables": []
    },
    {
        "title": "The self Parameter",
        "text": [
            "The self parameter is a reference to the \ncurrent instance of the class, and is used to access variables that belong to the class.",
            "It does not have to be named self, you can \ncall it whatever you like, but it has to be the first parameter of any function \nin the class:",
            "Example\nUse the words mysillyobject and abc instead of self:\n\n  class Person:  def __init__(mysillyobject, name, age):    \n  mysillyobject.name = name    mysillyobject.age = age  def myfunc(abc):    \n  print(\"Hello my name is \" + abc.name)p1 = Person(\"John\", \n  36)p1.myfunc()\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class Person:  def __init__(mysillyobject, name, age):    \n  mysillyobject.name = name    mysillyobject.age = age  def myfunc(abc):    \n  print(\"Hello my name is \" + abc.name)p1 = Person(\"John\", \n  36)p1.myfunc()"
            }
        ],
        "tables": []
    },
    {
        "title": "Modify Object Properties",
        "text": [
            "You can modify properties on objects like this:",
            "Example\nSet the age of p1 to 40:\n\n  p1.age = 40\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "p1.age = 40"
            }
        ],
        "tables": []
    },
    {
        "title": "Delete Object Properties",
        "text": [
            "You can delete properties on objects by using the \ndel keyword:",
            "Example\nDelete the age property from the p1 object:\n\n  del p1.age\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "del p1.age"
            }
        ],
        "tables": []
    },
    {
        "title": "Delete Objects",
        "text": [
            "You can delete objects by using the del keyword:",
            "Example\nDelete the p1 object:\n\n  del p1\nTry it Yourself »"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "del p1"
            }
        ],
        "tables": []
    },
    {
        "title": "The pass Statement",
        "text": [
            "class definitions cannot be empty, but if \nyou for some reason have a class definition with no content, put in the pass statement to avoid getting an error.",
            "Example\n\n  class Person:  pass\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "class Person:  pass"
            }
        ],
        "tables": []
    }
]