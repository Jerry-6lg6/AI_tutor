[
    {
        "title": "Boolean Expression",
        "text": [
            "A Boolean expression returns a boolean value, which is either 1 (true) or 0 \n(false).",
            "This is useful for building logic and finding answers.",
            "You can use a comparison operator, such as the greater than (>) operator, \nto find out if an expression (or variable) is true or false:",
            "Example\n\n  int x = 10;int y = 9;cout << (x > y); // returns 1 (true), because 10 is higher than 9\nTry it Yourself »",
            "Or even easier:",
            "Example\n\n  cout << (10 > 9); // returns 1 (true), because 10 is higher than 9\nTry it Yourself »",
            "In the examples below, we use the equal to (==) operator to evaluate an expression:",
            "Example\n\n  int x = 10;cout << (x == 10);  // returns 1 (true), because the value \n  of x is equal to 10\nTry it Yourself »",
            "Example\n\n  cout << (10 == 15);  // returns \n  0 (false), because 10 is not equal to 15\nTry it Yourself »",
            "",
            "❮ Previous\nNext ❯"
        ],
        "examples": [
            {
                "heading": "Example",
                "code": "int x = 10;int y = 9;cout << (x > y); // returns 1 (true), because 10 is higher than 9"
            },
            {
                "heading": "Example",
                "code": "cout << (10 > 9); // returns 1 (true), because 10 is higher than 9"
            },
            {
                "heading": "Example",
                "code": "int x = 10;cout << (x == 10);  // returns 1 (true), because the value \n  of x is equal to 10"
            },
            {
                "heading": "Example",
                "code": "cout << (10 == 15);  // returns \n  0 (false), because 10 is not equal to 15"
            }
        ],
        "tables": []
    }
]